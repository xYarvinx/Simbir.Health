Index: hospital-microservice/src/main/java/com/example/hospitalmicroservice/service/RabbitService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.hospitalmicroservice.service;\r\n\r\n\r\nimport com.example.hospitalmicroservice.dto.TokenValidationRequest;\r\nimport com.example.hospitalmicroservice.dto.TokenValidationResponse;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.amqp.core.Message;\r\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\r\nimport org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.UUID;\r\n\r\n@Service\r\n@AllArgsConstructor\r\npublic class RabbitService {\r\n    private final RabbitTemplate rabbitTemplate;\r\n\r\n\r\n    public TokenValidationResponse sendTokenValidationRequest(String token) {\r\n        String correlationId = UUID.randomUUID().toString();\r\n        TokenValidationRequest request = new TokenValidationRequest(token, correlationId);\r\n\r\n        rabbitTemplate.convertAndSend(\"authExchange\", \"auth.request.\" + correlationId, request);\r\n\r\n        Message responseMessage = rabbitTemplate.receive(\"authResponseQueue\", 5000);\r\n        if (responseMessage != null) {\r\n            return (TokenValidationResponse) rabbitTemplate.getMessageConverter().fromMessage(responseMessage);\r\n        } else {\r\n            throw new RuntimeException(\"No response received within timeout period\");\r\n        }\r\n    }\r\n\r\n\r\n    public TokenValidationResponse sendRoleValidationRequest(String token) {\r\n        String correlationId = UUID.randomUUID().toString();\r\n        TokenValidationRequest request = new TokenValidationRequest(token, correlationId);\r\n\r\n        rabbitTemplate.convertAndSend(\"roleExchange\", \"role.request.\" + correlationId, request);\r\n\r\n        Message responseMessage = rabbitTemplate.receive(\"roleResponseQueue\", 5000);\r\n        if (responseMessage != null) {\r\n            return (TokenValidationResponse) rabbitTemplate.getMessageConverter().fromMessage(responseMessage);\r\n        } else {\r\n            throw new RuntimeException(\"No response received within timeout period\");\r\n        }\r\n    }\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hospital-microservice/src/main/java/com/example/hospitalmicroservice/service/RabbitService.java b/hospital-microservice/src/main/java/com/example/hospitalmicroservice/service/RabbitService.java
--- a/hospital-microservice/src/main/java/com/example/hospitalmicroservice/service/RabbitService.java	(revision 8bab545aff16a094b92e98084230cbb93f40b7c6)
+++ b/hospital-microservice/src/main/java/com/example/hospitalmicroservice/service/RabbitService.java	(date 1729523610350)
@@ -1,12 +1,10 @@
 package com.example.hospitalmicroservice.service;
 
-
 import com.example.hospitalmicroservice.dto.TokenValidationRequest;
 import com.example.hospitalmicroservice.dto.TokenValidationResponse;
 import lombok.AllArgsConstructor;
 import org.springframework.amqp.core.Message;
 import org.springframework.amqp.rabbit.core.RabbitTemplate;
-import org.springframework.amqp.support.converter.Jackson2JsonMessageConverter;
 import org.springframework.stereotype.Service;
 
 import java.util.UUID;
@@ -16,34 +14,25 @@
 public class RabbitService {
     private final RabbitTemplate rabbitTemplate;
 
-
     public TokenValidationResponse sendTokenValidationRequest(String token) {
-        String correlationId = UUID.randomUUID().toString();
-        TokenValidationRequest request = new TokenValidationRequest(token, correlationId);
-
-        rabbitTemplate.convertAndSend("authExchange", "auth.request." + correlationId, request);
-
-        Message responseMessage = rabbitTemplate.receive("authResponseQueue", 5000);
-        if (responseMessage != null) {
-            return (TokenValidationResponse) rabbitTemplate.getMessageConverter().fromMessage(responseMessage);
-        } else {
-            throw new RuntimeException("No response received within timeout period");
-        }
+        return sendRequest(token, "authExchange", "authResponseQueue");
     }
-
 
     public TokenValidationResponse sendRoleValidationRequest(String token) {
+        return sendRequest(token, "roleExchange", "roleResponseQueue");
+    }
+
+    private TokenValidationResponse sendRequest(String token, String exchange, String responseQueue) {
         String correlationId = UUID.randomUUID().toString();
         TokenValidationRequest request = new TokenValidationRequest(token, correlationId);
 
-        rabbitTemplate.convertAndSend("roleExchange", "role.request." + correlationId, request);
+        rabbitTemplate.convertAndSend(exchange, "request." + correlationId, request);
 
-        Message responseMessage = rabbitTemplate.receive("roleResponseQueue", 5000);
+        Message responseMessage = rabbitTemplate.receive(responseQueue, 5000);
         if (responseMessage != null) {
             return (TokenValidationResponse) rabbitTemplate.getMessageConverter().fromMessage(responseMessage);
         } else {
             throw new RuntimeException("No response received within timeout period");
         }
     }
-
-}
+}
\ No newline at end of file
Index: hospital-microservice/src/main/java/com/example/hospitalmicroservice/controller/HospitalController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.hospitalmicroservice.controller;\r\n\r\nimport com.example.hospitalmicroservice.dto.HospitalRequest;\r\nimport com.example.hospitalmicroservice.dto.HospitalResponse;\r\nimport com.example.hospitalmicroservice.dto.MessageResponse;\r\nimport com.example.hospitalmicroservice.dto.RoomsResponse;\r\nimport com.example.hospitalmicroservice.exception.ControllerExceptionHandler;\r\nimport com.example.hospitalmicroservice.service.HospitalService;\r\nimport jakarta.servlet.http.HttpServletRequest;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.http.HttpStatus;\r\nimport org.springframework.web.bind.annotation.*;\r\n\r\nimport java.util.List;\r\n\r\n@RestController\r\n@RequestMapping(\"/api/Hospitals\")\r\n@AllArgsConstructor\r\n@ControllerExceptionHandler\r\npublic class HospitalController {\r\n    private final HospitalService hospitalService;\r\n\r\n    @GetMapping()\r\n    @ResponseStatus(HttpStatus.ACCEPTED)\r\n    private List<HospitalResponse> getHospitals(@RequestParam Integer from, @RequestParam Integer count) {\r\n        return hospitalService.getHospitals(from, count);\r\n    }\r\n\r\n    @GetMapping(\"/{hospitalId}\")\r\n    @ResponseStatus(HttpStatus.ACCEPTED)\r\n    private HospitalResponse getHospitalById(@PathVariable Long hospitalId) {\r\n        return hospitalService.getHospital(hospitalId);\r\n    }\r\n\r\n    @GetMapping(\"/{hospitalId}/Rooms\")\r\n    @ResponseStatus(HttpStatus.ACCEPTED)\r\n    private RoomsResponse getRoomsById(@PathVariable Long hospitalId) {\r\n        return hospitalService.getRooms(hospitalId);\r\n    }\r\n\r\n\r\n    @PostMapping()\r\n    @ResponseStatus(HttpStatus.CREATED)\r\n    private MessageResponse createHospital(@RequestBody HospitalRequest request, @RequestHeader(\"Authorization\") String token) {\r\n        hospitalService.createHospital(request, token);\r\n\r\n        return new MessageResponse(\"Больница успешно добавлена\");\r\n    }\r\n\r\n    @PutMapping(\"/{hospitalId}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    private MessageResponse updateHospital(@PathVariable Long hospitalId, @RequestBody HospitalRequest request, @RequestHeader(\"Authorization\") String token) {\r\n        hospitalService.updateHosptial(hospitalId, request, token);\r\n        return new MessageResponse(\"Данные больницы успешно обновленны\");\r\n    }\r\n\r\n    @DeleteMapping(\"/{hospitalId}\")\r\n    @ResponseStatus(HttpStatus.OK)\r\n    private MessageResponse deleteHospital(@PathVariable Long hospitalId, @RequestHeader(\"Authorization\") String token) {\r\n        hospitalService.deleteById(hospitalId, token);\r\n        return new MessageResponse(\"Больница успешно удалена\");\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hospital-microservice/src/main/java/com/example/hospitalmicroservice/controller/HospitalController.java b/hospital-microservice/src/main/java/com/example/hospitalmicroservice/controller/HospitalController.java
--- a/hospital-microservice/src/main/java/com/example/hospitalmicroservice/controller/HospitalController.java	(revision 8bab545aff16a094b92e98084230cbb93f40b7c6)
+++ b/hospital-microservice/src/main/java/com/example/hospitalmicroservice/controller/HospitalController.java	(date 1729523449550)
@@ -6,7 +6,6 @@
 import com.example.hospitalmicroservice.dto.RoomsResponse;
 import com.example.hospitalmicroservice.exception.ControllerExceptionHandler;
 import com.example.hospitalmicroservice.service.HospitalService;
-import jakarta.servlet.http.HttpServletRequest;
 import lombok.AllArgsConstructor;
 import org.springframework.http.HttpStatus;
 import org.springframework.web.bind.annotation.*;
Index: account-microservice/src/main/java/com/example/accountmicroservice/service/RabbitService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.accountmicroservice.service;\r\n\r\nimport com.example.accountmicroservice.config.TokenProvider;\r\nimport com.example.accountmicroservice.dto.TokenValidationRequest;\r\nimport com.example.accountmicroservice.dto.TokenValidationResponse;\r\nimport com.example.accountmicroservice.model.Role;\r\nimport lombok.AllArgsConstructor;\r\nimport org.springframework.amqp.rabbit.annotation.RabbitListener;\r\nimport org.springframework.amqp.rabbit.core.RabbitTemplate;\r\nimport org.springframework.stereotype.Service;\r\n\r\nimport java.util.List;\r\n\r\n@Service\r\npublic class RabbitService {\r\n    private final TokenProvider tokenProvider;\r\n    private final RabbitTemplate rabbitTemplate;\r\n\r\n    public RabbitService(TokenProvider tokenProvider, RabbitTemplate rabbitTemplate) {\r\n        this.tokenProvider = tokenProvider;\r\n        this.rabbitTemplate = rabbitTemplate;\r\n    }\r\n\r\n    @RabbitListener(queues = \"authRequestQueue\")\r\n    public void validateToken(TokenValidationRequest request) {\r\n        boolean isValid = tokenProvider.validateToken(request.getToken());\r\n        TokenValidationResponse response = new TokenValidationResponse(isValid, request.getCorrelationId());\r\n\r\n        rabbitTemplate.convertAndSend(\"authExchange\", \"auth.response.\" + request.getCorrelationId(), response);\r\n    }\r\n\r\n\r\n    @RabbitListener(queues = \"roleRequestQueue\")\r\n    public void validateIsAdmin(TokenValidationRequest request) {\r\n        boolean isAdmin = false;\r\n        List<Role> role =  tokenProvider.getRolesFromToken(request.getToken());\r\n        if (role.contains(Role.ADMIN)) {\r\n            isAdmin = true;\r\n        }\r\n        TokenValidationResponse response = new TokenValidationResponse(isAdmin, request.getCorrelationId());\r\n\r\n        rabbitTemplate.convertAndSend(\"roleExchange\", \"role.response.\" + request.getCorrelationId(), response);\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/account-microservice/src/main/java/com/example/accountmicroservice/service/RabbitService.java b/account-microservice/src/main/java/com/example/accountmicroservice/service/RabbitService.java
--- a/account-microservice/src/main/java/com/example/accountmicroservice/service/RabbitService.java	(revision 5f4628fad33a4eaeff281ce70678594a65661c9d)
+++ b/account-microservice/src/main/java/com/example/accountmicroservice/service/RabbitService.java	(date 1729501466593)
@@ -15,15 +15,20 @@
 public class RabbitService {
     private final TokenProvider tokenProvider;
     private final RabbitTemplate rabbitTemplate;
+    private final BlacklistTokenService blacklistTokenService;
 
-    public RabbitService(TokenProvider tokenProvider, RabbitTemplate rabbitTemplate) {
+    public RabbitService(TokenProvider tokenProvider, RabbitTemplate rabbitTemplate, BlacklistTokenService blacklistTokenService) {
         this.tokenProvider = tokenProvider;
         this.rabbitTemplate = rabbitTemplate;
+        this.blacklistTokenService =  blacklistTokenService;
     }
 
     @RabbitListener(queues = "authRequestQueue")
     public void validateToken(TokenValidationRequest request) {
-        boolean isValid = tokenProvider.validateToken(request.getToken());
+        boolean isValid = false;
+        if(!blacklistTokenService.isBlacklisted(request.getToken()) && tokenProvider.validateToken(request.getToken())) {
+            isValid = true;
+        }
         TokenValidationResponse response = new TokenValidationResponse(isValid, request.getCorrelationId());
 
         rabbitTemplate.convertAndSend("authExchange", "auth.response." + request.getCorrelationId(), response);
Index: hospital-microservice/src/main/java/com/example/hospitalmicroservice/config/OpenAPIConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/hospital-microservice/src/main/java/com/example/hospitalmicroservice/config/OpenAPIConfig.java b/hospital-microservice/src/main/java/com/example/hospitalmicroservice/config/OpenAPIConfig.java
new file mode 100644
--- /dev/null	(date 1729524783306)
+++ b/hospital-microservice/src/main/java/com/example/hospitalmicroservice/config/OpenAPIConfig.java	(date 1729524783306)
@@ -0,0 +1,28 @@
+package com.example.hospitalmicroservice.config;
+
+import io.swagger.v3.oas.annotations.OpenAPIDefinition;
+import io.swagger.v3.oas.annotations.enums.SecuritySchemeType;
+import io.swagger.v3.oas.annotations.info.Info;
+import io.swagger.v3.oas.annotations.security.SecurityRequirement;
+import io.swagger.v3.oas.annotations.security.SecurityScheme;
+import io.swagger.v3.oas.annotations.servers.Server;
+import org.springframework.context.annotation.Configuration;
+
+@Configuration
+@OpenAPIDefinition(
+        info = @Info(title = "Simbir.Health", version = "1.0", description = "Платформа для управления клиническими процессами"),
+        servers ={
+                @Server(url = "http://localhost:8081/swagger-ui/", description = "Account-microservice"),
+                @Server(url = "http://localhost:8082/swagger-ui/", description = "Hospital-microservice")
+        },
+        security = @SecurityRequirement(name = "bearerAuth")
+)
+@SecurityScheme(
+        name = "bearerAuth",
+        type = SecuritySchemeType.HTTP,
+        scheme = "bearer",
+        bearerFormat = "JWT",
+        description = "Введите JWT токен в формате: Bearer {token}"
+)
+public class OpenAPIConfig {
+}
\ No newline at end of file
